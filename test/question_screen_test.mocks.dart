// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_application_1/test/question_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_application_1/models/question.dart' as _i2;
import 'package:flutter_application_1/models/topic.dart' as _i6;
import 'package:flutter_application_1/services/question_service.dart' as _i3;
import 'package:flutter_application_1/services/topic_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQuestionModel_0 extends _i1.SmartFake implements _i2.QuestionModel {
  _FakeQuestionModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QuestionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionService extends _i1.Mock implements _i3.QuestionService {
  MockQuestionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.QuestionModel> getQuestion(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getQuestion,
          [id],
        ),
        returnValue: _i4.Future<_i2.QuestionModel>.value(_FakeQuestionModel_0(
          this,
          Invocation.method(
            #getQuestion,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.QuestionModel>);

  @override
  _i4.Future<bool> checkAnswer(
    int? topicId,
    int? questionId,
    String? answer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAnswer,
          [
            topicId,
            questionId,
            answer,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [TopicService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopicService extends _i1.Mock implements _i5.TopicService {
  MockTopicService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i6.TopicModel>> getTopics() => (super.noSuchMethod(
        Invocation.method(
          #getTopics,
          [],
        ),
        returnValue: _i4.Future<List<_i6.TopicModel>>.value(<_i6.TopicModel>[]),
      ) as _i4.Future<List<_i6.TopicModel>>);

  @override
  _i4.Future<String> getTheFewestCorrectTopic() => (super.noSuchMethod(
        Invocation.method(
          #getTheFewestCorrectTopic,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getTheFewestCorrectTopic,
            [],
          ),
        )),
      ) as _i4.Future<String>);
}
